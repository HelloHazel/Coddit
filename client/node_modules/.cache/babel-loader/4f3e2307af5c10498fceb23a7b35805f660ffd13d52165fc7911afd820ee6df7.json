{"ast":null,"code":"import { configureStore, createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst asyncTopic = createAsyncThunk(\"communitySlice/asyncTopic\", async () => {\n  const resp = await axios.get(\"/api/topic\");\n  return resp.data;\n});\nconst topicSlice = createSlice({\n  name: \"topicSlice\",\n  initialState: {\n    list: []\n  },\n  extraReducers: builder => {\n    builder.addCase(asyncTopic.pending, (state, action) => {\n      // console.log(\"pending\");\n    });\n    builder.addCase(asyncTopic.fulfilled, (state, action) => {\n      state.list = action.payload;\n      // console.log(\"fulfilled\");\n    });\n\n    builder.addCase(asyncTopic.rejected, (state, action) => {\n      // console.log(\"rejected\");\n    });\n  }\n});\nconst asyncSub = createAsyncThunk(\"subSlice/asyncSub\", async () => {\n  const resp = await axios.get(\"/api/sub\");\n  return resp.data;\n});\nconst subSlice = createSlice({\n  name: \"subSlice\",\n  initialState: {\n    list: []\n  },\n  extraReducers: builder => {\n    builder.addCase(asyncSub.pending, (state, action) => {\n      // console.log(\"pending\");\n    });\n    builder.addCase(asyncSub.fulfilled, (state, action) => {\n      state.list = action.payload;\n      // console.log(\"fulfilled\");\n    });\n\n    builder.addCase(asyncSub.rejected, (state, action) => {\n      // console.log(\"rejected\");\n    });\n  }\n});\nconst getPost = createAsyncThunk(\"postSlice/getPost\", async subid => {\n  const resp = await axios.get(\"/api/post\", {\n    params: {\n      subId: subid\n    }\n  });\n  return resp.data;\n});\nconst postSlice = createSlice({\n  name: \"postSlice\",\n  initialState: {\n    list: []\n  },\n  extraReducers: builder => {\n    builder.addCase(getPost.pending, (state, action) => {\n      // console.log(\"pending\");\n    });\n    builder.addCase(getPost.fulfilled, (state, action) => {\n      state.list = action.payload;\n      // console.log(action.payload);\n    });\n\n    builder.addCase(getPost.rejected, (state, action) => {\n      // console.log(\"rejected\");\n    });\n  }\n});\nexport default configureStore({\n  reducer: {\n    topicSlice: topicSlice.reducer,\n    subSlice: subSlice.reducer,\n    postSlice: postSlice.reducer\n  }\n});\nexport const getSubID = state => state.postSlice;\nexport { asyncTopic, asyncSub, getPost };","map":{"version":3,"names":["configureStore","createAsyncThunk","createSlice","axios","asyncTopic","resp","get","data","topicSlice","name","initialState","list","extraReducers","builder","addCase","pending","state","action","fulfilled","payload","rejected","asyncSub","subSlice","getPost","subid","params","subId","postSlice","reducer","getSubID"],"sources":["C:/projects/Reddit-Clone/client/src/store/store.js"],"sourcesContent":["import {\r\n  configureStore,\r\n  createAsyncThunk,\r\n  createSlice,\r\n} from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nconst asyncTopic = createAsyncThunk(\"communitySlice/asyncTopic\", async () => {\r\n  const resp = await axios.get(\"/api/topic\");\r\n  return resp.data;\r\n});\r\n\r\nconst topicSlice = createSlice({\r\n  name: \"topicSlice\",\r\n  initialState: {\r\n    list: [],\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(asyncTopic.pending, (state, action) => {\r\n      // console.log(\"pending\");\r\n    });\r\n    builder.addCase(asyncTopic.fulfilled, (state, action) => {\r\n      state.list = action.payload;\r\n      // console.log(\"fulfilled\");\r\n    });\r\n    builder.addCase(asyncTopic.rejected, (state, action) => {\r\n      // console.log(\"rejected\");\r\n    });\r\n  },\r\n});\r\n\r\nconst asyncSub = createAsyncThunk(\"subSlice/asyncSub\", async () => {\r\n  const resp = await axios.get(\"/api/sub\");\r\n  return resp.data;\r\n});\r\n\r\nconst subSlice = createSlice({\r\n  name: \"subSlice\",\r\n  initialState: {\r\n    list: [],\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(asyncSub.pending, (state, action) => {\r\n      // console.log(\"pending\");\r\n    });\r\n    builder.addCase(asyncSub.fulfilled, (state, action) => {\r\n      state.list = action.payload;\r\n      // console.log(\"fulfilled\");\r\n    });\r\n    builder.addCase(asyncSub.rejected, (state, action) => {\r\n      // console.log(\"rejected\");\r\n    });\r\n  },\r\n});\r\n\r\nconst getPost = createAsyncThunk(\"postSlice/getPost\", async (subid) => {\r\n  const resp = await axios.get(\"/api/post\", { params: { subId: subid } });\r\n  return resp.data;\r\n});\r\n\r\nconst postSlice = createSlice({\r\n  name: \"postSlice\",\r\n  initialState: {\r\n    list: [],\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(getPost.pending, (state, action) => {\r\n      // console.log(\"pending\");\r\n    });\r\n    builder.addCase(getPost.fulfilled, (state, action) => {\r\n      state.list = action.payload;\r\n      // console.log(action.payload);\r\n    });\r\n    builder.addCase(getPost.rejected, (state, action) => {\r\n      // console.log(\"rejected\");\r\n    });\r\n  },\r\n});\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    topicSlice: topicSlice.reducer,\r\n    subSlice: subSlice.reducer,\r\n    postSlice: postSlice.reducer,\r\n  },\r\n});\r\n\r\nexport const getSubID = (state: RootState) => state.postSlice;\r\n\r\nexport { asyncTopic, asyncSub, getPost };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}