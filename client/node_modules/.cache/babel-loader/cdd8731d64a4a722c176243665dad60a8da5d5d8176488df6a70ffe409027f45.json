{"ast":null,"code":"import { configureStore, createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nlet body = {\n  name: \"abc\",\n  password: \"1234\"\n};\nconst asyncTopic = createAsyncThunk(\"communitySlice/asyncTopic\", async () => {\n  const resp = await axios.get(\"/api/topic\");\n  return resp.data;\n});\nconst topicSlice = createSlice({\n  name: \"topicSlice\",\n  initialState: {\n    list: []\n  },\n  extraReducers: builder => {\n    builder.addCase(asyncTopic.pending, (state, action) => {\n      console.log(\"pending\");\n    });\n    builder.addCase(asyncTopic.fulfilled, (state, action) => {\n      state.list = action.payload;\n      console.log(\"fulfilled\");\n    });\n    builder.addCase(asyncTopic.rejected, (state, action) => {\n      state.error = action.payload;\n      console.log(\"fulfilled\");\n    });\n  }\n});\n\n// const topicSlice = createSlice({\n//   name: \"topicSlice\",\n//   initialState: {\n//     value: [],\n//     status: \"Welcome\",\n//     error: null,\n//   },\n//   // reducers: {\n//   //   getTopic: (state, action) => {\n//   //     state.value = action.payload;\n//   //   },\n//   // },\n//   extraReducers: (builder) => {\n//     builder.addCase(asyncTopic.pending, (state, action) => {\n//       state.status = \"Loading\";\n//     });\n//     builder.addCase(asyncTopic.fulfilled, (state, action) => {\n//       state.value = action.payload;\n//       state.status = \"complete\";\n//     });\n//     builder.addCase(asyncTopic.rejected, (state, action) => {\n//       state.error = action.payload;\n//       state.status = \"fail\";\n//     });\n//   },\n// });\n\nexport default configureStore({\n  reducer: {\n    topicSlice: topicSlice.reducer\n  }\n});\nexport { asyncTopic };","map":{"version":3,"names":["configureStore","createAsyncThunk","createSlice","axios","body","name","password","asyncTopic","resp","get","data","topicSlice","initialState","list","extraReducers","builder","addCase","pending","state","action","console","log","fulfilled","payload","rejected","error","reducer"],"sources":["C:/projects/Portfolio/client/src/store/store.js"],"sourcesContent":["import {\r\n  configureStore,\r\n  createAsyncThunk,\r\n  createSlice,\r\n} from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nlet body = {\r\n  name: \"abc\",\r\n  password: \"1234\",\r\n};\r\n\r\nconst asyncTopic = createAsyncThunk(\"communitySlice/asyncTopic\", async () => {\r\n  const resp = await axios.get(\"/api/topic\");\r\n  return resp.data;\r\n});\r\n\r\nconst topicSlice = createSlice({\r\n  name: \"topicSlice\",\r\n  initialState: {\r\n    list: [],\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(asyncTopic.pending, (state, action) => {\r\n      console.log(\"pending\");\r\n    });\r\n    builder.addCase(asyncTopic.fulfilled, (state, action) => {\r\n      state.list = action.payload;\r\n      console.log(\"fulfilled\");\r\n    });\r\n    builder.addCase(asyncTopic.rejected, (state, action) => {\r\n      state.error = action.payload;\r\n      console.log(\"fulfilled\");\r\n    });\r\n  },\r\n});\r\n\r\n// const topicSlice = createSlice({\r\n//   name: \"topicSlice\",\r\n//   initialState: {\r\n//     value: [],\r\n//     status: \"Welcome\",\r\n//     error: null,\r\n//   },\r\n//   // reducers: {\r\n//   //   getTopic: (state, action) => {\r\n//   //     state.value = action.payload;\r\n//   //   },\r\n//   // },\r\n//   extraReducers: (builder) => {\r\n//     builder.addCase(asyncTopic.pending, (state, action) => {\r\n//       state.status = \"Loading\";\r\n//     });\r\n//     builder.addCase(asyncTopic.fulfilled, (state, action) => {\r\n//       state.value = action.payload;\r\n//       state.status = \"complete\";\r\n//     });\r\n//     builder.addCase(asyncTopic.rejected, (state, action) => {\r\n//       state.error = action.payload;\r\n//       state.status = \"fail\";\r\n//     });\r\n//   },\r\n// });\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    topicSlice: topicSlice.reducer,\r\n  },\r\n});\r\n\r\nexport { asyncTopic };\r\n"],"mappings":"AAAA,SACEA,cAAc,EACdC,gBAAgB,EAChBC,WAAW,QACN,kBAAkB;AACzB,OAAOC,KAAK,MAAM,OAAO;AAEzB,IAAIC,IAAI,GAAG;EACTC,IAAI,EAAE,KAAK;EACXC,QAAQ,EAAE;AACZ,CAAC;AAED,MAAMC,UAAU,GAAGN,gBAAgB,CAAC,2BAA2B,EAAE,YAAY;EAC3E,MAAMO,IAAI,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,YAAY,CAAC;EAC1C,OAAOD,IAAI,CAACE,IAAI;AAClB,CAAC,CAAC;AAEF,MAAMC,UAAU,GAAGT,WAAW,CAAC;EAC7BG,IAAI,EAAE,YAAY;EAClBO,YAAY,EAAE;IACZC,IAAI,EAAE;EACR,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAACT,UAAU,CAACU,OAAO,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACrDC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACxB,CAAC,CAAC;IACFN,OAAO,CAACC,OAAO,CAACT,UAAU,CAACe,SAAS,EAAE,CAACJ,KAAK,EAAEC,MAAM,KAAK;MACvDD,KAAK,CAACL,IAAI,GAAGM,MAAM,CAACI,OAAO;MAC3BH,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;IAC1B,CAAC,CAAC;IACFN,OAAO,CAACC,OAAO,CAACT,UAAU,CAACiB,QAAQ,EAAE,CAACN,KAAK,EAAEC,MAAM,KAAK;MACtDD,KAAK,CAACO,KAAK,GAAGN,MAAM,CAACI,OAAO;MAC5BH,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;IAC1B,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAerB,cAAc,CAAC;EAC5B0B,OAAO,EAAE;IACPf,UAAU,EAAEA,UAAU,CAACe;EACzB;AACF,CAAC,CAAC;AAEF,SAASnB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}