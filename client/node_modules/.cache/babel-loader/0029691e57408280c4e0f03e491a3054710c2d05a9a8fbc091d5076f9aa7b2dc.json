{"ast":null,"code":"import { configureStore, createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst asyncComment = createAsyncThunk(\"commentSlice/asyncComment\", async post_id => {\n  let body = {\n    postid: post_id\n  };\n  const resp = await axios.post(\"/api/comment\", body);\n  return resp.data;\n});\nconst commentSlice = createSlice({\n  name: \"commentSlice\",\n  initialState: {\n    list: []\n  },\n  reducers: {\n    changeEdit: state\n  },\n  extraReducers: builder => {\n    builder.addCase(asyncComment.pending, (state, action) => {\n      // console.log(\"pending\");\n    });\n    builder.addCase(asyncComment.fulfilled, (state, action) => {\n      state.list = action.payload;\n      // console.log(\"fulfilled\");\n    });\n\n    builder.addCase(asyncComment.rejected, (state, action) => {\n      // console.log(\"rejected\");\n    });\n  }\n});\nconst userSlice = createSlice({\n  name: \"userSlice\",\n  initialState: {\n    userName: \"\"\n  },\n  reducers: {\n    setUser: (state, action) => {\n      state.userName = action.payload;\n      console.log(action.payload);\n    },\n    LogoutUser: state => {\n      state.userName = \"\";\n    }\n  },\n  extraReducers: {}\n});\nconst asyncTopic = createAsyncThunk(\"communitySlice/asyncTopic\", async () => {\n  const resp = await axios.get(\"/api/topic\");\n  return resp.data;\n});\nconst topicSlice = createSlice({\n  name: \"topicSlice\",\n  initialState: {\n    list: []\n  },\n  extraReducers: builder => {\n    builder.addCase(asyncTopic.pending, (state, action) => {\n      // console.log(\"pending\");\n    });\n    builder.addCase(asyncTopic.fulfilled, (state, action) => {\n      state.list = action.payload;\n      // console.log(\"fulfilled\");\n    });\n\n    builder.addCase(asyncTopic.rejected, (state, action) => {\n      // console.log(\"rejected\");\n    });\n  }\n});\nconst asyncSub = createAsyncThunk(\"subSlice/asyncSub\", async () => {\n  const resp = await axios.get(\"/api/sub\");\n  return resp.data;\n});\nconst subSlice = createSlice({\n  name: \"subSlice\",\n  initialState: {\n    list: []\n  },\n  extraReducers: builder => {\n    builder.addCase(asyncSub.pending, (state, action) => {\n      // console.log(\"pending\");\n    });\n    builder.addCase(asyncSub.fulfilled, (state, action) => {\n      state.list = action.payload;\n      // console.log(\"fulfilled\");\n    });\n\n    builder.addCase(asyncSub.rejected, (state, action) => {\n      // console.log(\"rejected\");\n    });\n  }\n});\nconst getPost = createAsyncThunk(\"postSlice/getPost\", async subid => {\n  const resp = await axios.get(\"/api/post\", {\n    params: {\n      subId: subid\n    }\n  });\n  return resp.data;\n});\nconst postSlice = createSlice({\n  name: \"postSlice\",\n  initialState: {\n    list: []\n  },\n  extraReducers: builder => {\n    builder.addCase(getPost.pending, (state, action) => {\n      // console.log(\"pending\");\n    });\n    builder.addCase(getPost.fulfilled, (state, action) => {\n      state.list = action.payload;\n      // console.log(action.payload);\n    });\n\n    builder.addCase(getPost.rejected, (state, action) => {\n      // console.log(\"rejected\");\n    });\n  }\n});\nexport default configureStore({\n  reducer: {\n    topicSlice: topicSlice.reducer,\n    subSlice: subSlice.reducer,\n    postSlice: postSlice.reducer,\n    userSlice: userSlice.reducer,\n    commentSlice: commentSlice.reducer\n  }\n});\nexport { asyncTopic, asyncSub, getPost, postSlice, userSlice, asyncComment, commentSlice };","map":{"version":3,"names":["configureStore","createAsyncThunk","createSlice","axios","asyncComment","post_id","body","postid","resp","post","data","commentSlice","name","initialState","list","reducers","changeEdit","state","extraReducers","builder","addCase","pending","action","fulfilled","payload","rejected","userSlice","userName","setUser","console","log","LogoutUser","asyncTopic","get","topicSlice","asyncSub","subSlice","getPost","subid","params","subId","postSlice","reducer"],"sources":["C:/projects/Reddit-Clone/client/src/store/store.js"],"sourcesContent":["import {\r\n  configureStore,\r\n  createAsyncThunk,\r\n  createSlice,\r\n} from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nconst asyncComment = createAsyncThunk(\r\n  \"commentSlice/asyncComment\",\r\n  async (post_id) => {\r\n    let body = {\r\n      postid: post_id,\r\n    };\r\n\r\n    const resp = await axios.post(\"/api/comment\", body);\r\n    return resp.data;\r\n  }\r\n);\r\n\r\nconst commentSlice = createSlice({\r\n  name: \"commentSlice\",\r\n  initialState: {\r\n    list: [],\r\n  },\r\n  reducers:{\r\n    changeEdit : (state)\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(asyncComment.pending, (state, action) => {\r\n      // console.log(\"pending\");\r\n    });\r\n    builder.addCase(asyncComment.fulfilled, (state, action) => {\r\n      state.list = action.payload;\r\n      // console.log(\"fulfilled\");\r\n    });\r\n    builder.addCase(asyncComment.rejected, (state, action) => {\r\n      // console.log(\"rejected\");\r\n    });\r\n  },\r\n});\r\n\r\nconst userSlice = createSlice({\r\n  name: \"userSlice\",\r\n  initialState: {\r\n    userName: \"\",\r\n  },\r\n  reducers: {\r\n    setUser: (state, action) => {\r\n      state.userName = action.payload;\r\n      console.log(action.payload);\r\n    },\r\n    LogoutUser: (state) => {\r\n      state.userName = \"\";\r\n    },\r\n  },\r\n  extraReducers: {},\r\n});\r\n\r\nconst asyncTopic = createAsyncThunk(\"communitySlice/asyncTopic\", async () => {\r\n  const resp = await axios.get(\"/api/topic\");\r\n  return resp.data;\r\n});\r\n\r\nconst topicSlice = createSlice({\r\n  name: \"topicSlice\",\r\n  initialState: {\r\n    list: [],\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(asyncTopic.pending, (state, action) => {\r\n      // console.log(\"pending\");\r\n    });\r\n    builder.addCase(asyncTopic.fulfilled, (state, action) => {\r\n      state.list = action.payload;\r\n      // console.log(\"fulfilled\");\r\n    });\r\n    builder.addCase(asyncTopic.rejected, (state, action) => {\r\n      // console.log(\"rejected\");\r\n    });\r\n  },\r\n});\r\n\r\nconst asyncSub = createAsyncThunk(\"subSlice/asyncSub\", async () => {\r\n  const resp = await axios.get(\"/api/sub\");\r\n  return resp.data;\r\n});\r\n\r\nconst subSlice = createSlice({\r\n  name: \"subSlice\",\r\n  initialState: {\r\n    list: [],\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(asyncSub.pending, (state, action) => {\r\n      // console.log(\"pending\");\r\n    });\r\n    builder.addCase(asyncSub.fulfilled, (state, action) => {\r\n      state.list = action.payload;\r\n      // console.log(\"fulfilled\");\r\n    });\r\n    builder.addCase(asyncSub.rejected, (state, action) => {\r\n      // console.log(\"rejected\");\r\n    });\r\n  },\r\n});\r\n\r\nconst getPost = createAsyncThunk(\"postSlice/getPost\", async (subid) => {\r\n  const resp = await axios.get(\"/api/post\", { params: { subId: subid } });\r\n  return resp.data;\r\n});\r\n\r\nconst postSlice = createSlice({\r\n  name: \"postSlice\",\r\n  initialState: {\r\n    list: [],\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(getPost.pending, (state, action) => {\r\n      // console.log(\"pending\");\r\n    });\r\n    builder.addCase(getPost.fulfilled, (state, action) => {\r\n      state.list = action.payload;\r\n      // console.log(action.payload);\r\n    });\r\n    builder.addCase(getPost.rejected, (state, action) => {\r\n      // console.log(\"rejected\");\r\n    });\r\n  },\r\n});\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    topicSlice: topicSlice.reducer,\r\n    subSlice: subSlice.reducer,\r\n    postSlice: postSlice.reducer,\r\n    userSlice: userSlice.reducer,\r\n    commentSlice: commentSlice.reducer,\r\n  },\r\n});\r\n\r\nexport {\r\n  asyncTopic,\r\n  asyncSub,\r\n  getPost,\r\n  postSlice,\r\n  userSlice,\r\n  asyncComment,\r\n  commentSlice,\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}